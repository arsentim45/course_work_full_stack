{"version":3,"sources":["components/HomepageImage.js","components/HighBar.js","App.js","serviceWorker.js","index.js"],"names":["HomepageImage","src","style","width","alt","HighBar","class","role","aria-label","data-hotkey","data-ga-click","data-selected-links","href","data-octo-click","data-octo-dimensions","App","className","window","token","target","rel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQASeA,MAPf,WAEE,OACE,yBAAKC,IAFK,wDAEKC,MAAO,CAACC,MAAO,KAAMC,IAAI,iC,KCgC7BC,MAlCf,WACE,OACE,4BAAQC,MAAM,SAASC,KAAK,UAC1B,yBAAKD,MAAM,iCACX,yBAAKA,MAAM,SAASE,aAAW,UAC/B,uBAAGF,MAAM,gDAAgDG,cAAY,MACrEC,gBAAc,oDACdF,aAAW,4BAA4BG,sBAAoB,iDAC3DC,KAAK,UAHL,cAKI,uBAAGN,MAAM,gDAAgDG,cAAY,MAC3EC,gBAAc,qDAAqDF,aAAW,qBAC9EG,sBAAoB,qDAAqDC,KAAK,WAFxE,cAKJ,yBAAKN,MAAM,QACX,uBAAGA,MAAM,0CACXI,gBAAc,0DACdG,kBAAgB,oBAAoBC,uBAAqB,mBACzDH,sBAAoB,gBAAgBC,KAAK,gBAHvC,cAMA,uBAAGN,MAAM,gDAAgDI,gBAAc,yCACzEC,sBAAoB,sMACpBC,KAAK,YAFH,oB,MCGSG,MAvBf,WACE,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,MACF,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,mCACO,4CADP,wBAGA,yCAAeC,OAAOC,OACtB,uBACEF,UAAU,WACVJ,KAAK,sBACLO,OAAO,SACPC,IAAI,uBAJN,kBCHYC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"js/main.2174d069.chunk.js","sourcesContent":["import React from 'react';\n\nfunction HomepageImage() {\n  const url = 'https://cdn.filestackcontent.com/XYrHCaFGRSaq0EPKY1S6';\n  return (\n    <img src={url} style={{width: 650}} alt='Image of Golden Gate Bridge' />\n  );\n}\n\nexport default HomepageImage;\n","import React from 'react';\nimport './HighBar.css'\n\nfunction HighBar() {\n  return (\n    <header class=\"Header\" role=\"banner\">\n      <div class=\"Header-item Header-item--full\">\n      <nav class=\"d-flex\" aria-label=\"Global\">\n      <a class=\"js-selected-navigation-item Header-link  mr-3\" data-hotkey=\"g p\"\n      data-ga-click=\"Header, click, Nav menu - item:pulls context:user\"\n      aria-label=\"Pull requests you created\" data-selected-links=\"/pulls /pulls/assigned /pulls/mentioned /pulls\"\n      href=\"/pulls\">\n      My Photos </a>\n          <a class=\"js-selected-navigation-item Header-link  mr-3\" data-hotkey=\"g i\"\n    data-ga-click=\"Header, click, Nav menu - item:issues context:user\" aria-label=\"Issues you created\"\n    data-selected-links=\"/issues /issues/assigned /issues/mentioned /issues\" href=\"/issues\">\n      My Filters\n</a>\n      <div class=\"mr-3\">\n      <a class=\"js-selected-navigation-item Header-link\"\n    data-ga-click=\"Header, click, Nav menu - item:marketplace context:user\"\n    data-octo-click=\"marketplace_click\" data-octo-dimensions=\"location:nav_bar\"\n    data-selected-links=\" /marketplace\" href=\"/marketplace\">\n      My account\n     </a>\n      <a class=\"js-selected-navigation-item Header-link  mr-3\" data-ga-click=\"Header, click, Nav menu - item:explore\"\n    data-selected-links=\"/explore /trending /trending/developers /integrations /integrations/feature/code /integrations/feature/collaborate /integrations/feature/ship showcases showcases_search showcases_landing /explore\"\n    href=\"/explore\">\n      All filters\n    </a>\n    </div>\n      </nav>\n      </div>\n        </header>\n  );\n}\n\nexport default HighBar;\n","import React from 'react';\nimport HomepageImage from './components/HomepageImage'\nimport HighBar from \"./components/HighBar\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HighBar/>\n      <header className=\"App-header\">\n        <HomepageImage/>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <p>My Token = {window.token}</p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}